import argparse
import math

# prepare parser
parser = argparse.ArgumentParser(description= 'generate V3 problem')
parser.add_argument('c0', metavar='C0Products', type=int, help='Number of C0 products', default=0)
parser.add_argument('c1', metavar='C1Products', type=int, help='Number of C1 products', default=0)
parser.add_argument('c2', metavar='C2Products', type=int, help='Number of C2 products', default=0)
parser.add_argument('c3', metavar='C3Products', type=int, help='Number of C3 products', default=0)
parser.add_argument('r', metavar='Robots', type=int, help='Number of robots', default=1)
parser.add_argument('bS', metavar='BaseStations', type=int, help='Number of Base Stations', default=1)
parser.add_argument('rS', metavar='RingStations', type=int, help='Number of Ring Stations', default=1)
parser.add_argument('cS', metavar='CapStations', type=int, help='Number of Cap Stations', default=1)
parser.add_argument('dS', metavar='DeliveryStations', type=int, help='Number of Delivery Stations', default=1)
parser.add_argument('rC', metavar='RingCost', type=str, help='Cost of all rings', default=0)

args = parser.parse_args()

# start generating file
name = "problemV3_" + str(args.c0) + "C0_" + str(args.c1) + "C1_" + str(args.c2) + "C2_" + str(args.c3) + "C3_" + str(args.r) + "R_" + str(args.bS ) + "BS_" + str(args.rS) + "RS_" + str(args.cS) +"CS_" + str(args.dS) + "DS_" + str(args.rC) + "RC_" + ".pddl"
f= open(str(name),"w+")

f.write("(define (problem test) (:domain RCLLV3) \n(:objects \n")

# set variables for later
total = args.c0 + args.c1 + args.c2 + args.c3
totalRings = args.c1 + 2*args.c2 + 3*args.c3
if args.rC == "free":
    extraBases = totalRings*0
elif args.rC == "one":
    extraBases = totalRings-total
elif args.rC == "two":
    extraBases = totalRings*2-total
elif args.rC == "three":
    extraBases = totalRings*3-total

# declare stations
for i in range(args.bS): 
    f.write("\tbaseStation" + str(i) + " - baseStation\n")
for i in range(args.rS): 
    f.write("\tringStation" + str(i) + " - ringStation\n")
for i in range(args.cS): 
    f.write("\tcapStation" + str(i) + " - capStation\n")
for i in range(args.dS): 
    f.write("\tdeliveryStation" + str(i) + " - deliveryStation\n")
f.write("\n")

# declare robots
for i in range(args.r): 
    f.write("\trobot" + str(i) + " - robot\n")
f.write("\n")

# declare pieces
for i in range(total):
    f.write("\tbase" + str(i) + " - base\n")
for i in range(extraBases):
    f.write("\textrabase" + str(i) + " - base\n")
for i in range(totalRings):
    f.write("\tring" + str(i) + " - ring\n")
for i in range(total):
    f.write("\tcap" + str(i) + " - cap\n")
for i in range(total):
    f.write("\tcapCarrier" + str(i) + " - base\n")
    
f.write(")\n(:init\n")

# init
# declare stations states
f.write("\t;Standart initial conditions: all stations are idle\n")
for i in range(args.bS): 
    f.write("\t(stationState baseStation" + str(i) + " idle)\n")
for i in range(args.rS): 
    f.write("\t(stationState ringStation" + str(i) + " idle)\n")
    f.write("\t(stationState ringStation" + str(i) + " paymentSlot1Free)\n")
    f.write("\t(stationState ringStation" + str(i) + " paymentSlot2Free)\n")
    f.write("\t(stationState ringStation" + str(i) + " paymentSlot3Free)\n")
for i in range(args.cS): 
    f.write("\t(stationState capStation" + str(i) + " idle)\n")
    f.write("\t(stationState capStation" + str(i) + " noCapCarrierOutput)\n")
for i in range(args.dS): 
    f.write("\t(stationState deliveryStation" + str(i) + " idle)\n")
f.write("\n")

f.write("\t;Standart initial conditions: all robots are available\n")
for i in range(args.r): 
    f.write("\t(available robot" + str(i) + ")\n")
    f.write("\t(gripFree robot" + str(i) + ")\n")
f.write("\n")

# split up workpieces over stations
f.write("\t;declare locations of workpieces\n")

# bases over base stations
for i in range(total):
    f.write("\t(storedAt base" + str(i) + " baseStation" + str(i%args.bS) + ")\n")
f.write("\n")

for i in range(extraBases):
    f.write("\t(storedAt extrabase" + str(i) + " baseStation" + str(i%args.bS) + ")\n")
f.write("\n")

# rings over ringstations
for i in range(totalRings):
    f.write("\t(storedAt ring" + str(i) + " ringStation" + str(i%args.rS) + ")\n")
f.write("\n")

# caps over cap stations
for i in range(total):
    f.write("\t(storedAt cap" + str(i) + " capStation" + str(i%args.cS) + ")\n")
f.write("\n")

# caps on CapCarriers
for i in range(total):
    f.write("\t(on cap" + str(i) + " capCarrier" + str(i) + ")\n")
f.write("\n")

# set ring costs
for i in range(totalRings):
    f.write("\t(ringCost ring" + str(i) + " " + str(args.rC) + ")\n")
    
f.write(")\n")

# define goals

f.write("(:goal (and\n")

# delivery & disposal
for i in range(total):
    f.write("\t(delivered cap" + str(i) + ")\n")
f.write("\n")
    
for i in range(total):
    f.write("\t(disposed capCarrier" + str(i) + ")\n")
f.write("\n")
    
# build products
for i in range(args.c0):
    f.write("\t(on cap" + str(i) + " base" + str(i) + ")\n")
    f.write("\n")

ringCounter = 0
for i in range(args.c1):
    f.write("\t(on ring" + str(ringCounter) + " base" + str(i+args.c0) + ")\n")
    f.write("\t(on cap" + str(i+args.c0) + " ring" + str(ringCounter) + ")\n")
    ringCounter = ringCounter + 1 
    f.write("\n")

for i in range(args.c1, args.c1+args.c2):
    f.write("\t(on ring" + str(ringCounter) + " base" + str(i+args.c0) + ")\n")
    f.write("\t(on ring" + str(ringCounter+1) + " ring" + str(ringCounter) + ")\n")
    f.write("\t(on cap" + str(i+args.c0) + " ring" + str(ringCounter+1) + ")\n")
    ringCounter = ringCounter + 2 
    f.write("\n")

for i in range(args.c1+args.c2, args.c1+args.c2+args.c3):
    f.write("\t(on ring" + str(ringCounter) + " base" + str(i+args.c0) + ")\n")
    f.write("\t(on ring" + str(ringCounter+1) + " ring" + str(ringCounter) + ")\n")
    f.write("\t(on ring" + str(ringCounter+2) + " ring" + str(ringCounter+1) + ")\n")
    f.write("\t(on cap" + str(i+args.c0) + " ring" + str(ringCounter+2) + ")\n")
    ringCounter = ringCounter + 3
    f.write("\n")

f.write(")) \n)")